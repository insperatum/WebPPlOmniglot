var Tensor = require('adnn/tensor');
var Canvas = require('canvas');
var fs = require('fs');
var path = require('path');

var drawStrokes = function(strokes) {
  var canvas = new Canvas(32, 32);
  var ctx=canvas.getContext("2d");
  ctx.fillStyle = 'white';
	ctx.fillRect(0, 0, 32, 32);
	ctx.lineWidth = 5;
	for(var i in strokes) {
	  var s = strokes[i];
	  ctx.beginPath();
	  ctx.moveTo(32*s[0][0], 32*s[0][1]);
	  for(var j=1; j<s.length; j++) {
	    ctx.lineTo(32*s[j][0], 32*s[j][1]);
	  }
	  ctx.stroke();
	}
	return {canvas:canvas, context:ctx};
};

var drawTensor = function(tens) {
  var canvas = new Canvas(32, 32);
  var ctx=canvas.getContext("2d");
  var imageData = ctx.createImageData(32, 32)
  for(var x=0; x<32; x++) {
    for(var y=0; y<32; y++) {
      imageData.data[y*32*4 + x*4] = tens.get([0, x, y])*255;
      imageData.data[y*32*4 + x*4 + 1] = tens.get([0, x, y])*255;
      imageData.data[y*32*4 + x*4 + 2] = tens.get([0, x, y])*255;
      imageData.data[y*32*4 + x*4 + 3] = 255;
    }
  }
  ctx.putImageData( imageData, 0, 0 );
	return {canvas:canvas, context:ctx};
};


var saveStrokes = function(strokes, filename) {
  fs.writeFileSync(filename, drawStrokes(strokes).canvas.toBuffer());
};

var saveTensor = function(tens, filename) {
  fs.writeFileSync(filename, drawTensor(tens).canvas.toBuffer());
};


var getImageData = function(strokes) {
  var imageData = drawStrokes(strokes).context.getImageData(0, 0, 32, 32);
  var data = new Tensor([1,32, 32]);
  for(var x=0; x<32; x++) {
    for(var y=0; y<32; y++) {
      data.set([0,x, y], 1 - (imageData.data[y*32*4 + x*4] / 255.0));
    }
  }
  return data;
};

var c=0;
var counter = function() {return c++;}

// var readImage = function(filename) {
//   var canvas = new Canvas(32, 32);
//   var ctx=canvas.getContext("2d");
  
//   var img = new Canvas.Image();
//   img.onload = function () {
//     ctx.drawImage(img, 0, 0);
//   };
  
//   img1.src = filename;
// }


function BmpDecoder(buffer) {
  this.pos = 0;
  this.buffer = buffer;
  this.flag = this.buffer.toString("utf-8", 0, this.pos += 2);
  if (this.flag != "BM") throw new Error("Invalid BMP File");
  this.parseHeader();
  this.parseData();
}

BmpDecoder.prototype.parseHeader = function() {
  this.fileSize = this.buffer.readUInt32LE(this.pos);
  this.pos += 4;
  this.reserved = this.buffer.readUInt32LE(this.pos);
  this.pos += 4;
  this.offset = this.buffer.readUInt32LE(this.pos);
  this.pos += 4;
  this.headerSize = this.buffer.readUInt32LE(this.pos);
  this.pos += 4;
  this.width = this.buffer.readUInt32LE(this.pos);
  this.pos += 4;
  this.height = this.buffer.readUInt32LE(this.pos);
  this.pos += 4;
  this.planes = this.buffer.readUInt16LE(this.pos);
  this.pos += 2;
  this.bitPP = this.buffer.readUInt16LE(this.pos);
  this.pos += 2;
  this.compress = this.buffer.readUInt32LE(this.pos);
  this.pos += 4;
  this.rawSize = this.buffer.readUInt32LE(this.pos);
  this.pos += 4;
  this.hr = this.buffer.readUInt32LE(this.pos);
  this.pos += 4;
  this.vr = this.buffer.readUInt32LE(this.pos);
  this.pos += 4;
  this.colors = this.buffer.readUInt32LE(this.pos);
  this.pos += 4;
  this.importantColors = this.buffer.readUInt32LE(this.pos);
  this.pos += 4;
};

BmpDecoder.prototype.parseData = function() {
  this.pos = this.offset;

  this.data = new Tensor([1, this.width, this.height]);

  var xlen = Math.ceil(this.width / 8);
  var mode = xlen%4;
  for (var y = this.height - 1; y >= 0; y--) {
    for (var xsub = 0; xsub < xlen; xsub++) {
      var b = this.buffer.readUInt8(this.pos++);
      var location = y * this.width + x*8;
      for (var x = xsub*8; x < xsub*8+8; x++) {
        if(xsub<this.width){
          var value = ((b>>(7-x + xsub*8))&0x1);
          this.data.set([0, x, y], value);
        }else{
          break;
        }
      }
    }

    if (mode != 0){
      this.pos+=(4 - mode);
    }
  }
};

BmpDecoder.prototype.getData = function() {
  return this.data;
  // return this.foo
};

var decode = function(bmpData) {
  var decoder = new BmpDecoder(bmpData);
  return decoder.getData();
};

var data = [];

var dir = "/home/lbh/Data/omniglot/32x32"//path.resolve(__dirname, "images");
var files = fs.readdirSync(dir);

var load = function(file) {
  var p = path.resolve(dir, file);
  console.log("Loading: " + p);
  var bmpBuffer = fs.readFileSync(p);
  var bmpData = decode(bmpBuffer);
  return bmpData
}
module.exports = {getImageData:getImageData, saveStrokes:saveStrokes, saveTensor:saveTensor, files:files, load: load, counter:counter}